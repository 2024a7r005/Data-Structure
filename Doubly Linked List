#include <stdio.h>
#include <stdlib.h>
struct Node {
    struct Node* prev;
    int data;
    struct Node* next;
};
struct Node* head = NULL;
struct Node* createNode(int ele) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = ele;
    temp->prev = temp->next = NULL;
    return temp;
}
void insertNodeInBeg(int ele) {
    struct Node* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
    } else {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
    printf("Node Inserted at Beginning\n");
}
void insertNodeAtEnd(int ele) {
    struct Node* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }
    printf("Node Inserted at End!\n");
}
void insertNodeAtAnyPos(int ele, int pos) {
    if (pos <= 0) {
        printf("Invalid Position!\n");
        return;
    }

    if (head == NULL || pos == 1) {
        insertNodeInBeg(ele);
        return;
    }

    struct Node* temp = head;
    int i = 1;
    while (i < pos - 1 && temp->next != NULL) {
        temp = temp->next;
        i++;
    }

    struct Node* newNode = createNode(ele);
    newNode->next = temp->next;
    newNode->prev = temp;

    if (temp->next != NULL)
        temp->next->prev = newNode;
    temp->next = newNode;

    printf("Node Inserted at Position %d!\n", pos);
}

void deleteNodeFromBeg() {
    if (head == NULL) {
        printf("List is Empty!\n");
        return;
    }

    struct Node* temp = head;
    head = head->next;
    if (head != NULL)
        head->prev = NULL;
    free(temp);
    printf("Node Deleted from Beginning!\n");
}

void deleteNodeFromEnd() {
    if (head == NULL) {
        printf("List is Empty!\n");
        return;
    }

    struct Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;

    if (temp->prev != NULL)
        temp->prev->next = NULL;
    else
        head = NULL;

    free(temp);
    printf("Node Deleted from End!\n");
}

void deleteNodeFromAnyPos(int pos) {
    if (head == NULL) {
        printf("List is Empty!\n");
        return;
    }

    if (pos == 1) {
        deleteNodeFromBeg();
        return;
    }

    struct Node* temp = head;
    int i = 1;
    while (i < pos && temp != NULL) {
        temp = temp->next;
        i++;
    }

    if (temp != NULL) {
        if (temp->prev != NULL)
            temp->prev->next = temp->next;
        if (temp->next != NULL)
            temp->next->prev = temp->prev;
        free(temp);
        printf("Node Deleted from Position %d!\n", pos);
    } else {
        printf("Invalid Position!\n");
    }
}

void search(int target) {
    struct Node* temp = head;
    int pos = 1, found = 0;

    while (temp != NULL) {
        if (temp->data == target) {
            printf("Element %d found at position %d\n", target, pos);
            found = 1;
            break;
        }
        temp = temp->next;
        pos++;
    }

    if (!found)
        printf("Element %d not found in the list!\n", target);
}

void display() {
    if (head == NULL) {
        printf("List is Empty!!!\n");
        return;
    }

    struct Node* temp = head;
    printf("Doubly Linked List: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int choice, ele, pos;

    while (1) {
        printf("\n--- Doubly Linked List Menu ---\n");
        printf("1. Insert Node at Beginning\n");
        printf("2. Insert Node at End\n");
        printf("3. Insert Node at Any Position\n");
        printf("4. Delete Node from Beginning\n");
        printf("5. Delete Node from End\n");
        printf("6. Delete Node from Any Position\n");
        printf("7. Search Element\n");
        printf("8. Display List\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Element: ");
                scanf("%d", &ele);
                insertNodeInBeg(ele);
                break;
            case 2:
                printf("Enter Element: ");
                scanf("%d", &ele);
                insertNodeAtEnd(ele);
                break;
            case 3:
                printf("Enter Element and Position: ");
                scanf("%d %d", &ele, &pos);
                insertNodeAtAnyPos(ele, pos);
                break;
            case 4:
                deleteNodeFromBeg();
                break;
            case 5:
                deleteNodeFromEnd();
                break;
            case 6:
                printf("Enter Position to Delete: ");
                scanf("%d", &pos);
                deleteNodeFromAnyPos(pos);
                break;
            case 7:
                printf("Enter Element to Search: ");
                scanf("%d", &ele);
                search(ele);
                break;
            case 8:
                display();
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid Choice!\n");
        }
    }

    return 0;
}
