//Implement Queue using Linked List & develop function to perform enqueue and dequeue operation.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* front = NULL;
Node* rear = NULL;
  
void enqueue(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Queue Overflow\n");
        return;
    }
    newNode->data = data;
    newNode->next = NULL; 
    if (rear == NULL) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
    printf("%d inserted\n", data);
}

int dequeue() {
    if (front == NULL) {
        printf("Queue Underflow\n");
        return -1;
    }
    Node* temp = front;
    int val = temp->data;
    front = front->next;
    if (front == NULL) {
        rear = NULL;
    }
    free(temp);
    return val;
}

int peek() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return -1;
    }
    return front->data;
}

void display() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return;
    }
    Node* temp = front;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

void freeAll() {
    while (front != NULL) {
        Node* temp = front;
        front = front->next;
        free(temp);
    }
    rear = NULL;
}

int main() {
    while (1) {
        printf("\n1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        
        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                int val;
                printf("Enter value: ");
                scanf("%d", &val);
                enqueue(val);
                break;
            }
            case 2: {
                int dequeueval = dequeue();
                if (dequeueval != -1) {
                    printf("%d dequeued\n", dequeueval);
                }
                break;
            }
            case 3: {
                int frontVal = peek();
                if (frontVal != -1) {
                    printf("Element at front: %d\n", frontVal);
                }
                break;
            }
            case 4:
                display();
                break;
            case 5:
                freeAll();
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
        system("Pause");
    }
    return 0;
}
