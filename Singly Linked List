#include <stdio.h>
#include <stdlib.h>
typedef struct node {
    int data;
    struct node *next;
} Node;

Node* head = NULL;

Node* createNode(int ele) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = ele;
    newNode->next = NULL;
    return newNode;
}

void insertNodeInBeg(int ele) {
    Node* newNode = createNode(ele);
    newNode->next = head;
    head = newNode;
    printf("Node Inserted !!!!\n");
}

void insertNodeAtEnd(int ele) {
    Node* newNode = createNode(ele);
    if (head == NULL)
        head = newNode;
    else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    printf("Node Inserted !!!!\n");
}

void insertNodeAtAnyPos(int ele, int pos) {
    if (pos == 1) {
        insertNodeInBeg(ele);
    } else {
        int i = 1;
        Node* temp = head;
        while (i < pos - 1 && temp != NULL) {
            temp = temp->next;
            i++;
        }
        if (temp != NULL) {
            Node* newNode = createNode(ele);
            newNode->next = temp->next;
            temp->next = newNode;
            printf("Node Inserted !!!!\n");
        } else {
            printf("Invalid Position !!!!\n");
        }
    }
}

void deleteNodeFromBeg() {
    if (head == NULL)
        printf("List is empty !!!\n");
    else {
        Node *t = head;
        head = head->next;
        free(t);
        printf("Node Deleted !!!\n");
    }
}

void deleteNodeFromEnd() {
    if (head == NULL)
        printf("List is empty !!!\n");
    else {
        Node *t;
        if (head->next == NULL) {
            t = head;
            head = NULL;
        } else {
            Node* temp = head;
            while (temp->next->next != NULL) {
                temp = temp->next;
            }
            t = temp->next;
            temp->next = NULL;
        }
        free(t);
        printf("Node Deleted !!!\n");
    }
}

void deleteNodeFromAnyPos(int pos) {
    if (head == NULL)
        printf("List is Empty !!!\n");
    else if (pos == 1)
        deleteNodeFromBeg();
    else {
        int i = 1;
        Node* temp = head;
        while (i < pos - 1 && temp->next != NULL) {
            i++;
            temp = temp->next;
        }
        if (temp->next != NULL && pos > 0) {
            Node *t = temp->next;
            temp->next = temp->next->next;
            free(t);
            printf("Node Deleted !!!\n");
        } else
            printf("Invalid Position !!!\n");
    }
}

void search(int target) {
    if (head == NULL)
        printf("List is Empty !!!\n");
    else {
        Node* temp = head;
        while (temp != NULL) {
            if (temp->data == target) {
                printf("Found !!!\n");
                return;
            }
            temp = temp->next;
        }
        printf("Not Found !!!\n");
    }
}

void sortList() {
    if (head == NULL || head->next == NULL) return;
    Node *i, *j;
    for (i = head; i->next != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                int temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}

void display() {
    if (head == NULL)
        printf("Linked List is Empty !!!!\n");
    else {
        Node* temp = head;
        while (temp != NULL) {
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    while (1) {
        printf("\n------ Singly Linked List ------\n");
        printf("1. Insert Node In beginning\n");
        printf("2. Insert Node at end\n");
        printf("3. Insert node at any position\n");
        printf("4. Delete node from beginning\n");
        printf("5. Delete Node from end\n");
        printf("6. Delete Node from any position\n");
        printf("7. Search Element in List\n");
        printf("8. Sort Element\n");
        printf("9. Display List\n");
        printf("10. Exit\n\n");

        int choice, value, pos;
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &value);
                insertNodeInBeg(value);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &value);
                insertNodeAtEnd(value);
                break;
            case 3:
                printf("Enter value: ");
                scanf("%d", &value);
                printf("Enter position: ");
                scanf("%d", &pos);
                insertNodeAtAnyPos(value, pos);
                break;
            case 4:
                deleteNodeFromBeg();
                break;
            case 5:
                deleteNodeFromEnd();
                break;
            case 6:
                printf("Enter position to delete: ");
                scanf("%d", &pos);
                deleteNodeFromAnyPos(pos);
                break;
            case 7:
                printf("Enter value to search: ");
                scanf("%d", &value);
                search(value);
                break;
            case 8:
                sortList();
                printf("List Sorted !!!\n");
                break;
            case 9:
                display();
                break;
            case 10:
                exit(0);
            default:
                printf("Invalid Choice !!!!\n");
        }
    }
    return 0;
}
