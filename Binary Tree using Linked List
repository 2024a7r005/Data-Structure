//Implement a Binary Tree using Linked List and develop functions to perform traversal, searching, insertion and deletion operations. 
#include <stdio.h>
#include <stdlib.h>
typedef struct TreeNode{
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} Node;
    
Node* createNode(int value){
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = value;
    node->left = node->right = NULL;
    return node;
}
// Inserting in level order
Node* insert(Node* root, int value){
    if (root == NULL) return createNode(value);
    Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;
    while (front < rear){
        Node* temp = queue[front++];
        if (temp->left == NULL) {
            temp->left = createNode(value);
            break;
        } else {
            queue[rear++] = temp->left;
        }
        if (temp->right == NULL) {
            temp->right = createNode(value);
            break;
        } else {
            queue[rear++] = temp->right;
        }
    }
    return root;
}

void preorder(Node* root) {
    if (root == NULL) return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

void inorder(Node* root) {
    if (root == NULL) return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

void postorder(Node* root) {
    if (root == NULL) return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}

void levelorder(Node* root) {
    if (root == NULL) return;
    Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;
    while (front < rear) {
        Node* temp = queue[front++];
        printf("%d ", temp->data);
        if (temp->left != NULL) queue[rear++] = temp->left;
        if (temp->right != NULL) queue[rear++] = temp->right;
    }
}

Node* search(Node* root, int value){
    if (root == NULL) return NULL;
    Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;
    while (front < rear) {
        Node* temp = queue[front++];
        if (temp->data == value) return temp;
        if (temp->left != NULL) queue[rear++] = temp->left;
        if (temp->right != NULL) queue[rear++] = temp->right;
    }
    return NULL;
}

Node* findDeepest(Node* root, Node** parent) {
    Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;
    Node* temp;
    *parent = NULL;
    while (front < rear) {
        temp = queue[front++];
        if (temp->left) {
            *parent = temp;
            queue[rear++] = temp->left;
        }
        if (temp->right) {
            *parent = temp;
            queue[rear++] = temp->right;
        }
    }
    return temp;
}

void deleteNode(Node* root, int value) {
    if (root == NULL) return;
    Node* target = search(root, value);
    if (target == NULL) {
        printf("Element Not Found!\n");
        return;
    }
    Node* parent = NULL;
    Node* deepest = findDeepest(root, &parent);
    if (deepest == NULL) return;
    target->data = deepest->data;
    if (parent->right == deepest)
        parent->right = NULL;
    else
        parent->left = NULL;
    free(deepest);
}

int main() {
    Node* root = NULL;
    int choice, val;
    while (1) {
        printf("\n1. Insert\n");
        printf("2. Pre-order\n");
        printf("3. In-order\n");
        printf("4. Post-Order\n");
        printf("5. Level-Order\n");
        printf("6. Search\n");
        printf("7. Delete\n");
        printf("8. Exit\n");
        printf("Enter Choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &val);
                root = insert(root, val);
                break;
            case 2:
                preorder(root); break;
            case 3:
                inorder(root); break;
            case 4:
                postorder(root); break;
            case 5:
                levelorder(root); break;
            case 6:
                printf("Enter value to search: ");
                scanf("%d", &val);
                {
                    Node* result = search(root, val);
                    if (result)
                        printf("Node found with value: %d\n", result->data);
                    else
                        printf("Node not found.\n");
                }
                break;
            case 7:
                printf("Enter value to delete: ");
                scanf("%d", &val);
                deleteNode(root, val);
                break;
            case 8:
                exit(0);
            default:
                printf("Invalid Choice!\n");
        }
    }
    return 0;
}
